intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
import impl_libs += fmt%lib{fmt}

lib{spdlog}: $include_dir/hxx{**} $src_dir/cxx{**} {hxx cxx}{** -version} hxx{version} \
             $impl_libs $intf_libs

if ($cxx.target.class != 'windows')
{
    lib{spdlog}: cxx.libs += -lpthread
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

objs{*}: cxx.poptions += -DSPDLOG_SHARED_LIB -DFMT_EXPORT -DFMT_SHARED

../upstream/include/spdlog/
{
    cxx.poptions += -DSPDLOG_FMT_EXTERNAL
}

../upstream/src/
{
    cxx.poptions =+ "-I$include_dir" "-I$out_root" "-I$src_root"
    cxx.poptions += -DSPDLOG_COMPILED_LIB -DSPDLOG_FMT_EXTERNAL
    objs{*}: cxx.poptions += -DFMT_EXPORT -DFMT_SHARED
}

# Export options.
#
lib{spdlog}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

libs{spdlog}: cxx.export.poptions += -DSPDLOG_SHARED_LIB -DFMT_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{spdlog}: bin.lib.version = @"-$version.project_id"
else
  lib{spdlog}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the spdlog/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/spdlog/
  install.subdirs = true
}

../upstream/include/spdlog/
{
    {hxx ixx txx}{*}:
    {
        install = include/spdlog
        install.subdirs = true
    }
}
